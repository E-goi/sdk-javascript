/**
 * APIv3 (New)
 *  # Introduction This is our new version of API. We invite you to start using it and give us your feedback # Getting Started  E-goi can be integrated with many environments and programming languages via our REST API. We've created a developer focused portal to give your organization a clear and quick overview of how to integrate with E-goi. The developer portal focuses on scenarios for integration and flow of events. We recommend familiarizing yourself with all of the content in the developer portal, before start using our rest API.  The E-goi  APIv3 is served over HTTPS. To ensure data privacy, unencrypted HTTP is not supported.  Request data is passed to the API by POSTing JSON objects to the API endpoints with the appropriate parameters.      BaseURL = api.egoiapp.com  # RESTful Services This API supports 5 HTTP methods:  * <b>GET</b>: The HTTP GET method is used to **read** (or retrieve) a representation of a resource. * <b>POST</b>: The POST verb is most-often utilized to **create** new resources. * <b>PATCH</b>: PATCH is used for **modify** capabilities. The PATCH request only needs to contain the changes to the resource, not the complete resource * <b>PUT</b>: PUT is most-often utilized for **update** capabilities, PUT-ing to a known resource URI with the request body containing the newly-updated representation of the original resource. * <b>DELETE</b>: DELETE is pretty easy to understand. It is used to **delete** a resource identified by a URI.  # Authentication  We use a custom authentication method, you will need a apikey that you can find in your account settings. Below you will see a curl example to get your account information:     #!/bin/bash     curl -X GET 'https://api.egoiapp.com/my-account' \\     -H 'accept: application/json' \\     -H 'Apikey: <YOUR_APY_KEY>'  Here you can see a curl Post example with authentication:     #!/bin/bash     curl -X POST 'http://api.egoiapp.com/tags' \\     -H 'accept: application/json' \\     -H 'Apikey: <YOUR_APY_KEY>' \\     -H 'Content-Type: application/json' \\     -d '{`name`:`Your custom tag`,`color`:`#FFFFFF`}'  # SDK Get started quickly with E-goi with our integration tools. Our SDK is a modern open source library that makes it easy to integrate your application with E-goi services.  * <a href='https://github.com/E-goi/sdk-java'>Java</a>  * <a href='https://github.com/E-goi/sdk-php'>PHP</a>  * <a href='https://github.com/E-goi/sdk-python'>Python</a>  * <a href='https://github.com/E-goi/sdk-ruby'>Ruby</a>  * <a href='https://github.com/E-goi/sdk-javascript'>Javascript</a>  * <a href='https://github.com/E-goi/sdk-csharp'>C#</a>  # Stream Limits Stream limits are security mesures we have to make sure our API have a fair use policy, for this reason, any request that creates or modifies data (**POST**, **PATCH** and **PUT**) is limited to a maximum of **20MB** of content length. If you arrive to this limit in one of your request, you'll receive a HTTP code **413 (Request Entity Too Large)** and the request will be ignored. To avoid this error in importation's requests, it's advised the request's division in batches that have each one less than 20MB.  # Timeouts Timeouts set a maximum waiting time on a request's response. Our API, sets a default timeout for each request and when breached, you'll receive an HTTP **408 (Request Timeout)** error code. You should take into consideration that response times can vary widely based on the complexity of the request, amount of data being analyzed, and the load on the system and workspace at the time of the query. When dealing with such errors, you should first attempt to reduce the complexity and amount of data under analysis, and only then, if problems are still occurring ask for support.  For all these reasons, the default timeout for each request is **10 Seconds** and any request that creates or modifies data (**POST**, **PATCH** and **PUT**) will have a timeout of **60 Seconds**. Specific timeouts may exist for specific requests, these can be found in the request's documentation.  # Callbacks A callback is an asynchronous API request that originates from the API server and is sent to the client in response to a previous request sent by that client.  The API will make a **POST** request to the address defined in the URL with the information regarding the event of interest and share data related to that event.  <a href='/usecases/callbacks/' target='_blank'>[Go to callbacks documentation]</a>  ***Note:*** Only http or https protocols are supported in the Url parameter.  <security-definitions/>
 *
 * The version of the OpenAPI document: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.egoisdk);
  }
}(this, function(expect, egoisdk) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new egoisdk.ContactBaseFieldsSchemaBase();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('ContactBaseFieldsSchemaBase', function() {
    it('should create an instance of ContactBaseFieldsSchemaBase', function() {
      // uncomment below and update the code to test ContactBaseFieldsSchemaBase
      //var instance = new egoisdk.ContactBaseFieldsSchemaBase();
      //expect(instance).to.be.a(egoisdk.ContactBaseFieldsSchemaBase);
    });

    it('should have the property contactId (base name: "contact_id")', function() {
      // uncomment below and update the code to test the property contactId
      //var instance = new egoisdk.ContactBaseFieldsSchemaBase();
      //expect(instance).to.be();
    });

    it('should have the property status (base name: "status")', function() {
      // uncomment below and update the code to test the property status
      //var instance = new egoisdk.ContactBaseFieldsSchemaBase();
      //expect(instance).to.be();
    });

    it('should have the property consent (base name: "consent")', function() {
      // uncomment below and update the code to test the property consent
      //var instance = new egoisdk.ContactBaseFieldsSchemaBase();
      //expect(instance).to.be();
    });

    it('should have the property consentDate (base name: "consent_date")', function() {
      // uncomment below and update the code to test the property consentDate
      //var instance = new egoisdk.ContactBaseFieldsSchemaBase();
      //expect(instance).to.be();
    });

    it('should have the property subscriptionMethod (base name: "subscription_method")', function() {
      // uncomment below and update the code to test the property subscriptionMethod
      //var instance = new egoisdk.ContactBaseFieldsSchemaBase();
      //expect(instance).to.be();
    });

    it('should have the property subscriptionDate (base name: "subscription_date")', function() {
      // uncomment below and update the code to test the property subscriptionDate
      //var instance = new egoisdk.ContactBaseFieldsSchemaBase();
      //expect(instance).to.be();
    });

    it('should have the property subscriptionForm (base name: "subscription_form")', function() {
      // uncomment below and update the code to test the property subscriptionForm
      //var instance = new egoisdk.ContactBaseFieldsSchemaBase();
      //expect(instance).to.be();
    });

    it('should have the property unsubscriptionMethod (base name: "unsubscription_method")', function() {
      // uncomment below and update the code to test the property unsubscriptionMethod
      //var instance = new egoisdk.ContactBaseFieldsSchemaBase();
      //expect(instance).to.be();
    });

    it('should have the property unsubscriptionReason (base name: "unsubscription_reason")', function() {
      // uncomment below and update the code to test the property unsubscriptionReason
      //var instance = new egoisdk.ContactBaseFieldsSchemaBase();
      //expect(instance).to.be();
    });

    it('should have the property unsubscriptionObservation (base name: "unsubscription_observation")', function() {
      // uncomment below and update the code to test the property unsubscriptionObservation
      //var instance = new egoisdk.ContactBaseFieldsSchemaBase();
      //expect(instance).to.be();
    });

    it('should have the property unsubscriptionDate (base name: "unsubscription_date")', function() {
      // uncomment below and update the code to test the property unsubscriptionDate
      //var instance = new egoisdk.ContactBaseFieldsSchemaBase();
      //expect(instance).to.be();
    });

    it('should have the property changeDate (base name: "change_date")', function() {
      // uncomment below and update the code to test the property changeDate
      //var instance = new egoisdk.ContactBaseFieldsSchemaBase();
      //expect(instance).to.be();
    });

    it('should have the property firstName (base name: "first_name")', function() {
      // uncomment below and update the code to test the property firstName
      //var instance = new egoisdk.ContactBaseFieldsSchemaBase();
      //expect(instance).to.be();
    });

    it('should have the property lastName (base name: "last_name")', function() {
      // uncomment below and update the code to test the property lastName
      //var instance = new egoisdk.ContactBaseFieldsSchemaBase();
      //expect(instance).to.be();
    });

    it('should have the property birthDate (base name: "birth_date")', function() {
      // uncomment below and update the code to test the property birthDate
      //var instance = new egoisdk.ContactBaseFieldsSchemaBase();
      //expect(instance).to.be();
    });

    it('should have the property language (base name: "language")', function() {
      // uncomment below and update the code to test the property language
      //var instance = new egoisdk.ContactBaseFieldsSchemaBase();
      //expect(instance).to.be();
    });

    it('should have the property email (base name: "email")', function() {
      // uncomment below and update the code to test the property email
      //var instance = new egoisdk.ContactBaseFieldsSchemaBase();
      //expect(instance).to.be();
    });

    it('should have the property emailStatus (base name: "email_status")', function() {
      // uncomment below and update the code to test the property emailStatus
      //var instance = new egoisdk.ContactBaseFieldsSchemaBase();
      //expect(instance).to.be();
    });

    it('should have the property cellphone (base name: "cellphone")', function() {
      // uncomment below and update the code to test the property cellphone
      //var instance = new egoisdk.ContactBaseFieldsSchemaBase();
      //expect(instance).to.be();
    });

    it('should have the property cellphoneStatus (base name: "cellphone_status")', function() {
      // uncomment below and update the code to test the property cellphoneStatus
      //var instance = new egoisdk.ContactBaseFieldsSchemaBase();
      //expect(instance).to.be();
    });

    it('should have the property phone (base name: "phone")', function() {
      // uncomment below and update the code to test the property phone
      //var instance = new egoisdk.ContactBaseFieldsSchemaBase();
      //expect(instance).to.be();
    });

    it('should have the property phoneStatus (base name: "phone_status")', function() {
      // uncomment below and update the code to test the property phoneStatus
      //var instance = new egoisdk.ContactBaseFieldsSchemaBase();
      //expect(instance).to.be();
    });

    it('should have the property pushTokenAndroid (base name: "push_token_android")', function() {
      // uncomment below and update the code to test the property pushTokenAndroid
      //var instance = new egoisdk.ContactBaseFieldsSchemaBase();
      //expect(instance).to.be();
    });

    it('should have the property pushTokenIos (base name: "push_token_ios")', function() {
      // uncomment below and update the code to test the property pushTokenIos
      //var instance = new egoisdk.ContactBaseFieldsSchemaBase();
      //expect(instance).to.be();
    });

  });

}));
