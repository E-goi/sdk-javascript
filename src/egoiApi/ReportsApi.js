/**
 * APIv3 (New)
 *  # Introduction This is our new version of API. We invite you to start using it and give us your feedback # Getting Started  E-goi can be integrated with many environments and programming languages via our REST API. We've created a developer focused portal to give your organization a clear and quick overview of how to integrate with E-goi. The developer portal focuses on scenarios for integration and flow of events. We recommend familiarizing yourself with all of the content in the developer portal, before start using our rest API.   The E-goi  APIv3 is served over HTTPS. To ensure data privacy, unencrypted HTTP is not supported.  Request data is passed to the API by POSTing JSON objects to the API endpoints with the appropriate parameters.   BaseURL = api.egoiapp.com  # RESTful Services This API supports 5 HTTP methods:  * <b>GET</b>: The HTTP GET method is used to **read** (or retrieve) a representation of a resource. * <b>POST</b>: The POST verb is most-often utilized to **create** new resources. * <b>PATCH</b>: PATCH is used for **modify** capabilities. The PATCH request only needs to contain the changes to the resource, not the complete resource * <b>PUT</b>: PUT is most-often utilized for **update** capabilities, PUT-ing to a known resource URI with the request body containing the newly-updated representation of the original resource. * <b>DELETE</b>: DELETE is pretty easy to understand. It is used to **delete** a resource identified by a URI.  # Authentication   We use a custom authentication method, you will need a apikey that you can find in your account settings. Below you will see a curl example to get your account information:  #!/bin/bash  curl -X GET 'https://api.egoiapp.com/my-account' \\  -H 'accept: application/json' \\  -H 'Apikey: <YOUR_APY_KEY>'  Here you can see a curl Post example with authentication:  #!/bin/bash  curl -X POST 'http://api.egoiapp.com/tags' \\  -H 'accept: application/json' \\  -H 'Apikey: <YOUR_APY_KEY>' \\  -H 'Content-Type: application/json' \\  -d '{`name`:`Your custom tag`,`color`:`#FFFFFF`}'  # SDK Get started quickly with E-goi with our integration tools. Our SDK is a modern open source library that makes it easy to integrate your application with E-goi services.  * <a href='https://github.com/E-goi/sdk-java'>Java</a>  * <a href='https://github.com/E-goi/sdk-php'>PHP</a>  * <a href='https://github.com/E-goi/sdk-python'>Python</a>  * <a href='https://github.com/E-goi/sdk-ruby'>Ruby</a>  * <a href='https://github.com/E-goi/sdk-javascript'>Javascript</a>  * <a href='https://github.com/E-goi/sdk-csharp'>C#</a>  # Stream Limits Stream limits are security mesures we have to make sure our API have a fair use policy, for this reason, any request that creates or modifies data (**POST**, **PATCH** and **PUT**) is limited to a maximum of **20MB** of content length. If you arrive to this limit in one of your request, you'll receive a HTTP code **413 (Request Entity Too Large)** and the request will be ignored. To avoid this error in importation's requests, it's advised the request's division in batches that have each one less than 20MB.  # Timeouts Timeouts set a maximum waiting time on a request's response. Our API, sets a default timeout for each request and when breached, you'll receive an HTTP **408 (Request Timeout)** error code. You should take into consideration that response times can vary widely based on the complexity of the request, amount of data being analyzed, and the load on the system and workspace at the time of the query. When dealing with such errors, you should first attempt to reduce the complexity and amount of data under analysis, and only then, if problems are still occurring ask for support.  For all these reasons, the default timeout for each request is **10 Seconds** and any request that creates or modifies data (**POST**, **PATCH** and **PUT**) will have a timeout of **60 Seconds**. Specific timeouts may exist for specific requests, these can be found in the request's documentation.  <security-definitions/>
 *
 * OpenAPI spec version: 3.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 *
 * OpenAPI Generator version: 3.3.4
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'egoiSdk/Forbidden', 'egoiSdk/InternalServerError', 'egoiSdk/NotFound', 'egoiSdk/PhoneReport', 'egoiSdk/RequestTimeout', 'egoiSdk/ServiceUnavailable', 'egoiSdk/TooManyRequests', 'egoiSdk/Unauthorized', 'egoiSdk/UnprocessableEntity', 'egoiSdk/WebPushReport'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../egoiSdk/Forbidden'), require('../egoiSdk/InternalServerError'), require('../egoiSdk/NotFound'), require('../egoiSdk/PhoneReport'), require('../egoiSdk/RequestTimeout'), require('../egoiSdk/ServiceUnavailable'), require('../egoiSdk/TooManyRequests'), require('../egoiSdk/Unauthorized'), require('../egoiSdk/UnprocessableEntity'), require('../egoiSdk/WebPushReport'));
  } else {
    // Browser globals (root is window)
    if (!root.egoiSdk) {
      root.egoiSdk = {};
    }
    root.egoiSdk.ReportsApi = factory(root.egoiSdk.ApiClient, root.egoiSdk.Forbidden, root.egoiSdk.InternalServerError, root.egoiSdk.NotFound, root.egoiSdk.PhoneReport, root.egoiSdk.RequestTimeout, root.egoiSdk.ServiceUnavailable, root.egoiSdk.TooManyRequests, root.egoiSdk.Unauthorized, root.egoiSdk.UnprocessableEntity, root.egoiSdk.WebPushReport);
  }
}(this, function(ApiClient, Forbidden, InternalServerError, NotFound, PhoneReport, RequestTimeout, ServiceUnavailable, TooManyRequests, Unauthorized, UnprocessableEntity, WebPushReport) {
  'use strict';

  /**
   * Reports service.
   * @module egoiApi/ReportsApi
   * @version 1.1.1RC1
   */

  /**
   * Constructs a new ReportsApi. 
   * @alias module:egoiApi/ReportsApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the getSMSReport operation.
     * @callback module:egoiApi/ReportsApi~getSMSReportCallback
     * @param {String} error Error message, if any.
     * @param {module:egoiSdk/PhoneReport} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get sms report
     * Returns sms report given the campaign hash
     * @param {String} campaignHash ID of the Campaign
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.networks True to show network stats (default to true)
     * @param {module:egoiApi/ReportsApi~getSMSReportCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:egoiSdk/PhoneReport}
     */
    this.getSMSReport = function(campaignHash, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'campaignHash' is set
      if (campaignHash === undefined || campaignHash === null) {
        throw new Error("Missing the required parameter 'campaignHash' when calling getSMSReport");
      }


      var pathParams = {
        'campaign_hash': campaignHash
      };
      var queryParams = {
        'networks': opts['networks'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Apikey'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = PhoneReport;

      return this.apiClient.callApi(
        '/reports/sms/{campaign_hash}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getVoiceReport operation.
     * @callback module:egoiApi/ReportsApi~getVoiceReportCallback
     * @param {String} error Error message, if any.
     * @param {module:egoiSdk/PhoneReport} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get voice report
     * Returns voice report given the campaign hash
     * @param {String} campaignHash ID of the Campaign
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.networks True to show network stats (default to true)
     * @param {module:egoiApi/ReportsApi~getVoiceReportCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:egoiSdk/PhoneReport}
     */
    this.getVoiceReport = function(campaignHash, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'campaignHash' is set
      if (campaignHash === undefined || campaignHash === null) {
        throw new Error("Missing the required parameter 'campaignHash' when calling getVoiceReport");
      }


      var pathParams = {
        'campaign_hash': campaignHash
      };
      var queryParams = {
        'networks': opts['networks'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Apikey'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = PhoneReport;

      return this.apiClient.callApi(
        '/reports/voice/{campaign_hash}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getWebPushReport operation.
     * @callback module:egoiApi/ReportsApi~getWebPushReportCallback
     * @param {String} error Error message, if any.
     * @param {module:egoiSdk/WebPushReport} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get webpush report
     * Returns webpush report given the campaign hash
     * @param {String} campaignHash ID of the Campaign
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.devices True to show device stats (default to true)
     * @param {Boolean} opts.operatingSystems True to show operating systems stats (default to true)
     * @param {Boolean} opts.browsers True to show browser stats (default to true)
     * @param {Boolean} opts.url True to show url stats (default to true)
     * @param {module:egoiApi/ReportsApi~getWebPushReportCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:egoiSdk/WebPushReport}
     */
    this.getWebPushReport = function(campaignHash, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'campaignHash' is set
      if (campaignHash === undefined || campaignHash === null) {
        throw new Error("Missing the required parameter 'campaignHash' when calling getWebPushReport");
      }


      var pathParams = {
        'campaign_hash': campaignHash
      };
      var queryParams = {
        'devices': opts['devices'],
        'operating_systems': opts['operatingSystems'],
        'browsers': opts['browsers'],
        'url': opts['url'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Apikey'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = WebPushReport;

      return this.apiClient.callApi(
        '/reports/web-push/{campaign_hash}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
